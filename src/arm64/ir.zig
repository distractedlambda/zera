const wasm = @import("../wasm.zig");

const Instruction = union(enum) {
    @"return": InstructionList,
    @"unreachable": void,
    binop: Binop,
    block_parameter: BlockParameter,
    br_if: BrIf,
    br_table: BrTable,
    br: Br,
    call_indirect: CallIndirect,
    call: Call,
    f32_const: f32,
    f64_const: f64,
    global_get: wasm.GlobalIndex,
    global_set: GlobalSet,
    i32_const: i32,
    i64_const: i64,
    load: Load,
    memory_size: void,
    ref_func: wasm.FunctionIndex,
    ref_null: wasm.ReferenceType,
    select: Select,
    store: Store,
    table_get: TableGet,
    table_set: TableSet,
    table_size: wasm.TableIndex,
    unop: Unop,
    v128_const: u128,

    const Br = struct {
        target: BlockId,
        arguments: InstructionList,
    };

    const BrIf = struct {
        condition: InstructionId,
        target: BlockId,
        arguments: InstructionList,
    };

    const BrTable = struct {
        index: InstructionId,
        cases: BlockList,
        default: BlockId,
    };

    const BlockParameter = struct {
        block: BlockId,
        index: u32,
    };

    const Call = struct {
        callee: wasm.FunctionIndex,
        arguments: InstructionList,
    };

    const CallIndirect = struct {
        callee_type: wasm.TypeIndex,
        table: wasm.TableIndex,
        arguments: InstructionList,
    };

    const Select = struct {
        type: wasm.ValueType,
        condition: InstructionId,
        if_true: InstructionId,
        if_false: InstructionId,
    };

    const GlobalSet = struct {
        global: wasm.GlobalIndex,
        value: InstructionId,
    };

    const TableGet = struct {
        table: wasm.TableIndex,
        index: InstructionId,
    };

    const TableSet = struct {
        table: wasm.TableIndex,
        index: InstructionId,
        value: InstructionId,
    };

    const Load = struct {
        type: Type,
        address: InstructionId,
        offset: u32,

        const Type = enum {
            i32,
            i64,
            f32,
            f64,
            i32_8_s,
            i32_8_u,
            i32_16_s,
            i32_16_u,
            i64_8_s,
            i64_8_u,
            i64_16_s,
            i64_16_u,
            i64_32_s,
            i64_32_u,
        };
    };

    const Store = struct {
        type: Type,
        address: InstructionId,
        offset: u32,
        value: InstructionId,

        const Type = enum {
            i32,
            i64,
            f32,
            f64,
            i32_8,
            i32_16,
            i64_8,
            i64_16,
            i64_32,
        };
    };

    const Unop = struct {
        op: Op,
        operand: InstructionId,

        const Op = enum {
            i32_eqz,
            i64_eqz,
            i32_clz,
            i32_ctz,
            i32_popcnt,
            i64_clz,
            i64_ctz,
            i64_popcnt,
            f32_abs,
            f32_neg,
            f32_ceil,
            f32_floor,
            f32_trunc,
            f32_nearest,
            f32_sqrt,
            f64_abs,
            f64_neg,
            f64_ceil,
            f64_floor,
            f64_trunc,
            f64_nearest,
            f64_sqrt,
            i32_wrap_i64,
            i32_trunc_f32_s,
            i32_trunc_f32_u,
            i32_trunc_f64_s,
            i32_trunc_f64_u,
            i64_extend_i32_s,
            i64_extend_i32_u,
            i64_trunc_f32_s,
            i64_trunc_f32_u,
            i64_trunc_f64_s,
            i64_trunc_f64_u,
            f32_convert_i32_s,
            f32_convert_i32_u,
            f32_convert_i64_s,
            f32_convert_i64_u,
            f32_demote_f64,
            f64_convert_i32_s,
            f64_convert_i32_u,
            f64_convert_i64_s,
            f64_convert_i64_u,
            f64_promote_f32,
            i32_reinterpret_f32,
            i64_reinterpret_f64,
            f32_reinterpret_i32,
            f64_reinterpret_i64,
            i32_extend8_s,
            i32_extend16_s,
            i64_extend8_s,
            i64_extend16_s,
            i64_extend32_s,
            ref_is_null,

            i32_trunc_sat_f32_s,
            i32_trunc_sat_f32_u,
            i32_trunc_sat_f64_s,
            i32_trunc_sat_f64_u,
            i64_trunc_sat_f32_s,
            i64_trunc_sat_f32_u,
            i64_trunc_sat_f64_s,
            i64_trunc_sat_f64_u,

            i8x16_splat,
            i16x8_splat,
            i32x4_splat,
            i64x2_splat,
            f32x4_splat,
            f64x2_splat,
            v128_not,
            v128_any_true,
            f32x4_demote_f64x2_zero,
            f64x2_promote_low_f32x4,
            i8x16_abs,
            i8x16_neg,
            i8x16_popcnt,
            i8x16_all_true,
            i8x16_bitmask,
            i8x16_narrow_i16x8_s,
            i8x16_narrow_i16x8_u,
            f32x4_ceil,
            f32x4_floor,
            f32x4_trunc,
            f32x4_nearest,
            f64x2_ceil,
            f64x2_floor,
            f64x2_trunc,
            i16x8_abs,
            i16x8_neg,
            i16x8_all_true,
            i16x8_bitmask,
            i16x8_narrow_i32x4_s,
            i16x8_narrow_i32x4_u,
            i16x8_extend_low_i8x16_s,
            i16x8_extend_high_i8x16_s,
            i16x8_extend_low_i8x16_u,
            i16x8_extend_high_i8x16_u,
            f64x2_nearest,
            i32x4_abs,
            i32x4_neg,
            i32x4_all_true,
            i32x4_bitmask,
            i32x4_extend_low_i16x8_s,
            i32x4_extend_high_i16x8_s,
            i32x4_extend_low_i16x8_u,
            i32x4_extend_high_i16x8_u,
            i64x2_abs,
            i64x2_neg,
            i64x2_all_true,
            i64x2_bitmask,
            i64x2_extend_low_i32x4_s,
            i64x2_extend_high_i32x4_s,
            i64x2_extend_low_i32x4_u,
            i64x2_extend_high_i32x4_u,
            f32x4_abs,
            f32x4_neg,
            f32x4_sqrt,
            f64x2_abs,
            f64x2_neg,
            f64x2_sqrt,
            i32x4_trunc_sat_f32x4_s,
            i32x4_trunc_sat_f32x4_u,
            f32x4_convert_i32x4_s,
            f32x4_convert_i32x4_u,
            i32x4_trunc_sat_f64x2_s_zero,
            i32x4_trunc_sat_f64x2_u_zero,
            f64x2_convert_low_i32x4_s,
            f64x2_convert_low_i32x4_u,
        };
    };

    const Binop = struct {
        op: Op,
        lhs: InstructionId,
        rhs: InstructionId,

        const Op = enum {
            i32_eq,
            i32_ne,
            i32_lt_s,
            i32_lt_u,
            i32_gt_s,
            i32_gt_u,
            i32_le_s,
            i32_le_u,
            i32_ge_s,
            i32_ge_u,
            i64_eq,
            i64_ne,
            i64_lt_s,
            i64_lt_u,
            i64_gt_s,
            i64_gt_u,
            i64_le_s,
            i64_le_u,
            i64_ge_s,
            i64_ge_u,
            f32_eq,
            f32_ne,
            f32_lt,
            f32_gt,
            f32_le,
            f32_ge,
            f64_eq,
            f64_ne,
            f64_lt,
            f64_gt,
            f64_le,
            f64_ge,
            i32_add,
            i32_sub,
            i32_mul,
            i32_div_s,
            i32_div_u,
            i32_rem_s,
            i32_rem_u,
            i32_and,
            i32_or,
            i32_xor,
            i32_shl,
            i32_shr_s,
            i32_shr_u,
            i32_rotl,
            i32_rotr,
            i64_add,
            i64_sub,
            i64_mul,
            i64_div_s,
            i64_div_u,
            i64_rem_s,
            i64_rem_u,
            i64_and,
            i64_or,
            i64_xor,
            i64_shl,
            i64_shr_s,
            i64_shr_u,
            i64_rotl,
            i64_rotr,
            f32_add,
            f32_sub,
            f32_mul,
            f32_div,
            f32_min,
            f32_max,
            f32_copysign,
            f64_add,
            f64_sub,
            f64_mul,
            f64_div,
            f64_min,
            f64_max,
            f64_copysign,

            i8x16_swizzle,
            i8x16_eq,
            i8x16_ne,
            i8x16_lt_s,
            i8x16_lt_u,
            i8x16_gt_s,
            i8x16_gt_u,
            i8x16_le_s,
            i8x16_le_u,
            i8x16_ge_s,
            i8x16_ge_u,
            i16x8_eq,
            i16x8_ne,
            i16x8_lt_s,
            i16x8_lt_u,
            i16x8_gt_s,
            i16x8_gt_u,
            i16x8_le_s,
            i16x8_le_u,
            i16x8_ge_s,
            i16x8_ge_u,
            i32x4_eq,
            i32x4_ne,
            i32x4_lt_s,
            i32x4_lt_u,
            i32x4_gt_s,
            i32x4_gt_u,
            i32x4_le_s,
            i32x4_le_u,
            i32x4_ge_s,
            i32x4_ge_u,
            f32x4_eq,
            f32x4_ne,
            f32x4_lt,
            f32x4_gt,
            f32x4_le,
            f32x4_ge,
            f64x2_eq,
            f64x2_ne,
            f64x2_lt,
            f64x2_gt,
            f64x2_le,
            f64x2_ge,
            v128_and,
            v128_andnot,
            v128_or,
            v128_xor,
            v128_bitselect,
            i8x16_shl,
            i8x16_shr_s,
            i8x16_shr_u,
            i8x16_add,
            i8x16_add_sat_s,
            i8x16_add_sat_u,
            i8x16_sub,
            i8x16_sub_sat_s,
            i8x16_sub_sat_u,
            i8x16_min_s,
            i8x16_min_u,
            i8x16_max_s,
            i8x16_max_u,
            i8x16_avgr_u,
            i16x8_extadd_pairwise_i8x16_s,
            i16x8_extadd_pairwise_i8x16_u,
            i32x4_extadd_pairwise_i16x8_s,
            i32x4_extadd_pairwise_i16x8_u,
            i16x8_q15mulr_sat_s,
            i16x8_shl,
            i16x8_shr_s,
            i16x8_shr_u,
            i16x8_add,
            i16x8_add_sat_s,
            i16x8_add_sat_u,
            i16x8_sub,
            i16x8_sub_sat_s,
            i16x8_sub_sat_u,
            i16x8_mul,
            i16x8_min_s,
            i16x8_min_u,
            i16x8_max_s,
            i16x8_max_u,
            i16x8_avgr_u,
            i16x8_extmul_low_i8x16_s,
            i16x8_extmul_high_i8x16_s,
            i16x8_extmul_low_i8x16_u,
            i16x8_extmul_high_i8x16_u,
            i32x4_shl,
            i32x4_shr_s,
            i32x4_shr_u,
            i32x4_add,
            i32x4_sub,
            i32x4_mul,
            i32x4_min_s,
            i32x4_min_u,
            i32x4_max_s,
            i32x4_max_u,
            i32x4_dot_i16x8_s,
            i32x4_extmul_low_i16x8_s,
            i32x4_extmul_high_i16x8_s,
            i32x4_extmul_low_i16x8_u,
            i32x4_extmul_high_i16x8_u,
            i64x2_shl,
            i64x2_shr_s,
            i64x2_shr_u,
            i64x2_add,
            i64x2_sub,
            i64x2_mul,
            i64x2_eq,
            i64x2_ne,
            i64x2_lt_s,
            i64x2_gt_s,
            i64x2_le_s,
            i64x2_ge_s,
            i64x2_extmul_low_i32x4_s,
            i64x2_extmul_high_i32x4_s,
            i64x2_extmul_low_i32x4_u,
            i64x2_extmul_high_i32x4_u,
            f32x4_add,
            f32x4_sub,
            f32x4_mul,
            f32x4_div,
            f32x4_min,
            f32x4_max,
            f32x4_pmin,
            f32x4_pmax,
            f64x2_add,
            f64x2_sub,
            f64x2_mul,
            f64x2_div,
            f64x2_min,
            f64x2_max,
            f64x2_pmin,
            f64x2_pmax,
        };
    };
};

const Block = struct {};

const Id = u32;

const IdList = struct {
    start: u32,
    len: u32,
};

const BlockId = Id;
const InstructionId = Id;

const BlockList = IdList;
const InstructionList = IdList;
